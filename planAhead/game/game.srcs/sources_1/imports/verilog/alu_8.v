/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_8 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n,
    output reg overflow
  );
  
  
  
  wire [16-1:0] M_addermod_sum1;
  wire [1-1:0] M_addermod_z;
  wire [1-1:0] M_addermod_v;
  wire [1-1:0] M_addermod_n;
  wire [1-1:0] M_addermod_overflow;
  reg [6-1:0] M_addermod_alufn;
  reg [16-1:0] M_addermod_a;
  reg [16-1:0] M_addermod_b;
  adder_13 addermod (
    .alufn(M_addermod_alufn),
    .a(M_addermod_a),
    .b(M_addermod_b),
    .sum1(M_addermod_sum1),
    .z(M_addermod_z),
    .v(M_addermod_v),
    .n(M_addermod_n),
    .overflow(M_addermod_overflow)
  );
  
  wire [16-1:0] M_comparemod_cmp1;
  reg [6-1:0] M_comparemod_alufn;
  reg [1-1:0] M_comparemod_z;
  reg [1-1:0] M_comparemod_v;
  reg [1-1:0] M_comparemod_n;
  compare_14 comparemod (
    .alufn(M_comparemod_alufn),
    .z(M_comparemod_z),
    .v(M_comparemod_v),
    .n(M_comparemod_n),
    .cmp1(M_comparemod_cmp1)
  );
  
  wire [16-1:0] M_booleanmod_boole;
  reg [6-1:0] M_booleanmod_alufn;
  reg [16-1:0] M_booleanmod_a;
  reg [16-1:0] M_booleanmod_b;
  boolean_15 booleanmod (
    .alufn(M_booleanmod_alufn),
    .a(M_booleanmod_a),
    .b(M_booleanmod_b),
    .boole(M_booleanmod_boole)
  );
  
  wire [16-1:0] M_shiftermod_a1;
  reg [6-1:0] M_shiftermod_alufn;
  reg [16-1:0] M_shiftermod_a;
  reg [16-1:0] M_shiftermod_b;
  shifter_16 shiftermod (
    .alufn(M_shiftermod_alufn),
    .a(M_shiftermod_a),
    .b(M_shiftermod_b),
    .a1(M_shiftermod_a1)
  );
  
  always @* begin
    M_addermod_a = a;
    M_addermod_b = b;
    M_addermod_alufn = alufn;
    M_comparemod_alufn = alufn;
    M_comparemod_v = M_addermod_v;
    M_comparemod_n = M_addermod_n;
    M_comparemod_z = M_addermod_z;
    M_booleanmod_a = a;
    M_booleanmod_b = b;
    M_booleanmod_alufn = alufn;
    M_shiftermod_a = a;
    M_shiftermod_b = b;
    M_shiftermod_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_addermod_sum1;
      end
      2'h1: begin
        alu = M_booleanmod_boole;
      end
      2'h2: begin
        alu = M_shiftermod_a1;
      end
      2'h3: begin
        alu = M_comparemod_cmp1;
      end
      default: begin
        alu = 8'h00;
      end
    endcase
    v = M_addermod_v;
    n = M_addermod_n;
    z = M_addermod_z;
    overflow = M_addermod_overflow;
  end
endmodule
